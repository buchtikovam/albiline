table: editable cell

	// const updateData = (rowDataId: unknown, columnId: string, newValue: string | number) => {
	// 	if (['age', 'visits', 'progress'].includes(columnId)) {
	// 		if (typeof newValue === 'string') {
	// 			newValue = parseInt(newValue);
	// 		}
	// 		if (isNaN(newValue)) {
	// 			$productData = $productData;
	// 			return;
	// 		}
	// 	}
	// 	if (columnId === 'status') {
	// 		if (!['relationship', 'single', 'complicated'].includes(<string>newValue)) {
	// 			$productData = $productData;
	// 			return;
	// 		}
	// 	}
	// };
	//

	// const EditableCellLabel = ({ column, row, value }) =>
    	// 	createRender(EditableCell, {
    	// 		row,
    	// 		column,
    	// 		value,
    	// 		onUpdateValue: updateData
    	// 	});



table: hide columns

	// const { filterValue } = pluginStates.filter;
	// const { hiddenColumnIds } = pluginStates.hide;

	// const ids = flatColumns.map((col) => col.id);
    	// let hideForId = Object.fromEntries(ids.map((id) => [id, true]));

    	// $: $hiddenColumnIds = Object.entries(hideForId)
    	// 	.filter(([, hide]) => !hide)
    	// 	.map(([id]) => id);



table: column filter with other attributes

	// colFilter: {
			// 	fn: textPrefixFilter,
			// 	initialFilterValue: '',
			// 	render: ({ filterValue, values, preFilteredValues }) =>
			// 		createRender(TextFilter, { filterValue, values, preFilteredValues })
		// },



sidebar: search with sidebar options:

	<button on:click={toggleCommandFn} class="w-fit p-1 pb-0 rounded-t-md hover:bg-muted/50">-->
<!--			<Search class="h-4 " />-->
<!--			</button>


table: drop function

/ function drop(event: DragEvent) {
	// 	event.preventDefault();
	//
	// 	const droppedItemValue = event.dataTransfer?.getData('text/plain');
	// 	console.log('drop droppeditem: ', droppedItemValue);
	//
	// 	const dragIndex = order.indexOf(draggingItemValue);
	// 	console.log('drop dragIndex: ', dragIndex);
	//
	// 	const dropIndex = order.indexOf(droppedItemValue);
	// 	console.log('drop dropIndex: ', dropIndex);
	//
	// 	if (dragIndex !== -1 && dropIndex !== -1 && dragIndex !== dropIndex) {
	// 		[order[dragIndex], order[dropIndex]] = [order[dropIndex], order[dragIndex]];
	// 		console.log(order);
	// 		columnIdOrder.set(order);
	// 	}
	//
	// 	console.log('  ');
	// 	draggingItemValue = null;
	// }



table: column dnd

// let order: string[];
	//
	// const { columnIdOrder } = pluginStates.colOrder;
	//
	// columnIdOrder.subscribe((data) => {
	// 	order = data;
	// 	console.log(data);
	// });
	//
	// function dragStart(e: DragEvent, itemValue: string) {
	// 	console.log('dragStart itemValue:', itemValue);
	// 	e.dataTransfer?.setData('text/plain', itemValue);
	// }
	//
	// function dragoverHandler(e: DragEvent) {
	// 	e.preventDefault();
	// 	console.log("dragover handler");
	// }
	//
	// function dropHandler(e: DragEvent) {
	// 	e.preventDefault();
	// 	const draggingItemValue: string | undefined = e.dataTransfer?.getData("text/plain");
	// 	if (draggingItemValue === undefined) {
	// 		return;
	// 	}
	//
	// 	console.log('drop droppeditem: ', draggingItemValue);
	//
	// 	const dragIndex = order.indexOf(draggingItemValue);
	// 	console.log('drop dragIndex: ', dragIndex);


		// if (dragIndex !== -1 && dropIndex !== -1 && dragIndex !== dropIndex) {
		// 	[order[dragIndex], order[dropIndex]] = [order[dropIndex], order[dragIndex]];
		// 	console.log(order);
		// 	columnIdOrder.set(order);
		// }

		// console.log('  ');
	// }
